# Importing libraries
import pycountry
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from err_ranges import err_ranges
from sklearn.cluster import KMeans
from scipy.optimize import curve_fit
from sklearn.preprocessing import StandardScaler


# Function to read Climate Indicator data from a CSV file and return two dataframes
def load_climate_indicator_data(file):
    """
    This function loads the data and converts it into two formats:
    One has years as columns and the other has country names as columns.
    
    Parameter:
        file: Name of the data file.
    
    Returns:
        year_data: Dataframe with years as columns
        country_data: Dataframe with country names as columns
        
    """
     # Read the CSV file and skip the first 4 rows
    df = pd.read_csv(file, skiprows=4)
    
    # Drop unnecessary columns
    df = df.iloc[:, :-1]
    
    # Create a copy of the dataset with years as columns
    year_data = df.copy()
    
    # Create a dataset with countries as columns
    country_data = df.set_index(["Country Name", "Indicator Name"])
    country_data.drop(["Country Code", "Indicator Code"], axis=1, inplace=True)
    
    # Transpose the countries dataframe
    country_data = country_data.T
    
    # Return the years and countries dataframes
    return year_data, country_data


filename = 'climate_indicators.csv'
data_frame, countries = load_climate_indicator_data(filename)
# Used to extract data from dataframe
def extract_data(data_frame, indicators_list):
    """
    Function is used to extract specific data from the dataframe
    
    Parameters:
        data_frame: Total Dataframe
        indicators_list: The indicators for which data has to be extracted.
        
    Returns:
        extracted_data: Extracted data
    """
    
    # Filter the dataset for the required indicators
    extracted_data = data_frame[data_frame["Indicator Name"].isin(indicators_list)]
    
    # Extracting data for only countries
    country_list = [country.name for country in list(pycountry.countries)]
    extracted_data = extracted_data[extracted_data["Country Name"].isin(country_list)]
    
    return extracted_data


# Indicators List
indicators_list = [
    'CO2 emissions (kt)',
    'Total greenhouse gas emissions (kt of CO2 equivalent)',
    'Methane emissions (kt of CO2 equivalent)',
    'Electric power consumption (kWh per capita)',
    'Renewable energy consumption (% of total final energy consumption)'
]

# Selecing the data based on indicator List 
selected_data = extract_data(data_frame, indicators_list)
selected_data = selected_data.fillna(method='ffill').fillna(method='bfill')
pivot_data = selected_data.pivot_table(index='Country Name', columns='Indicator Name', values='2019')

labels = [
    "CO2 Emissions",
    "Greenhouse Gas Emission",
    "Methane Gas Emission",
    "Electricity Power Consumption",
    "Renewable energy"
]

corr_matrix = pivot_data.corr()
mask = np.triu(np.ones_like(corr_matrix, dtype=bool))
sns.heatmap(corr_matrix, mask=mask, cmap='mako', annot=True, fmt='.2f', xticklabels=labels, yticklabels=labels)
plt.title('Correlation between environmental factors')
plt.show()

# Sorting by Highest GreenHouse Gas Emission by Countries
temp = pivot_data[["Total greenhouse gas emissions (kt of CO2 equivalent)"]].sort_values(by="Total greenhouse gas emissions (kt of CO2 equivalent)", ascending=False).iloc[:30]
colors = plt.cm.get_cmap("RdYlGn_r")(range(len(temp)))
temp.plot(kind="bar", figsize=(12, 5), color=colors)
plt.ylabel("Greenhouse Gas Emission")
plt.title("Greenhouse Gas Emission by Countries")
plt.show()

# Clustering

